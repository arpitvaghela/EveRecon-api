# Generated by Django 3.1.7 on 2021-03-21 05:40

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Community",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "logo",
                    models.ImageField(null=True, upload_to="images/community/logos/"),
                ),
                (
                    "banner",
                    models.ImageField(
                        blank=True, null=True, upload_to="images/community/banners/"
                    ),
                ),
                ("featured_video", models.URLField(blank=True, null=True)),
                ("address", models.TextField(blank=True, null=True)),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("country", models.CharField(blank=True, max_length=255, null=True)),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("members_count", models.IntegerField()),
                ("website", models.URLField(blank=True, null=True)),
                ("facebook", models.URLField(blank=True, null=True)),
                ("linkedin", models.URLField(blank=True, null=True)),
                ("twitter", models.URLField(blank=True, null=True)),
                ("instagram", models.URLField(blank=True, null=True)),
                ("discord", models.URLField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("creation_time", models.TimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Speaker",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(blank=True, max_length=255, null=True)),
                ("email", models.EmailField(max_length=254)),
                ("facebook", models.URLField()),
                ("instagram", models.URLField()),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="images/speaker/profile_pictures/",
                    ),
                ),
                ("description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Volunteer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("creation_time", models.TimeField(auto_now_add=True)),
                (
                    "communities",
                    models.ManyToManyField(
                        blank=True, related_name="volunteers", to="everecon.Community"
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="volunteers_at",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Sponsor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="images/sponsor/logos/"
                    ),
                ),
                (
                    "banner",
                    models.ImageField(
                        blank=True, null=True, upload_to="images/community/banners/"
                    ),
                ),
                (
                    "communities",
                    models.ManyToManyField(
                        blank=True, related_name="sponsors", to="everecon.Community"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("contact", models.CharField(blank=True, max_length=15, null=True)),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("country", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="images/"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Member",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("creation_time", models.TimeField(auto_now_add=True)),
                (
                    "communities",
                    models.ManyToManyField(
                        blank=True, related_name="members", to="everecon.Community"
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="members_at",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("type", models.CharField(max_length=255)),
                ("address", models.TextField(blank=True, null=True)),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("country", models.CharField(blank=True, max_length=255, null=True)),
                ("live_URL", models.URLField(blank=True, null=True)),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                (
                    "featured_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="images/event/featured/"
                    ),
                ),
                ("is_active", models.BooleanField(blank=True, default=True)),
                ("creation_time", models.TimeField(auto_now_add=True)),
                ("max_RSVP", models.IntegerField()),
                (
                    "attendees",
                    models.ManyToManyField(
                        blank=True,
                        related_name="events_attended",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="everecon.category",
                    ),
                ),
                (
                    "speakers",
                    models.ManyToManyField(
                        blank=True, related_name="events", to="everecon.Speaker"
                    ),
                ),
                ("tags", models.ManyToManyField(blank=True, to="everecon.Tag")),
            ],
        ),
        migrations.CreateModel(
            name="CoreMember",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("creation_time", models.TimeField(auto_now_add=True)),
                (
                    "communities",
                    models.ManyToManyField(
                        blank=True, related_name="core_members", to="everecon.Community"
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="core_members_at",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommunityLeader",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("creation_time", models.TimeField(auto_now_add=True)),
                (
                    "communities",
                    models.ManyToManyField(
                        blank=True,
                        related_name="community_leaders",
                        to="everecon.Community",
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="community_leaders_at",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="community",
            name="events",
            field=models.ManyToManyField(
                blank=True, related_name="communities", to="everecon.Event"
            ),
        ),
    ]
